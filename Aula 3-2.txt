[Como vamos pegar os dados que digitamos no campo de texto?

Nós demos um console.log() e ele disse que o formulário foi submetido, mas não é isso o que queremos.
Nós queremos pegar esse valor e chamar uma API de um micro serviço e guardar em um banco de dados.
Queremos pegar o cadastro e criar um card do Organo.

Se estivessemos fazendo isso com o JavaScript vanilla, nós varreríamos o DOM, procuraríamos o
input e pegaríamos o valor (value) dele. Algo mais ou menos assim. No React é diferente.]



Primeiro, vamos criar um comando do JavaScript no input do index.js do CampoTexto, se chama
onChange, que receberá uma função nova (entre chaves). O onChange é ativado toda vez que tiver
alguma mudança no input, ou seja, será chamado toda vez que digitarmos alguma letra ou caractere.


    const aoDigitar = (evento) => {
        console.log(evento.target.value)
    }

    return (
        <div className="campo-texto">
            <label>
                {props.label}
            </label>
            <input onChange={aoDigitar} required = {props.obrigatorio} placeholder={props.placeholder}/>
        </div>
    )


Precisamos do "target" porque ele não imprime os caracteres sem ele. Digite qualquer coisa nos campos e veja
o que é exibido no console.
Para facilitar, crie uma variável "valor" que receba um valor vazio e depois coloque na função aoDigitar que
ela receberá o evento.target.value. Assim:

let valor = ""

const aoDigitar = (evento) => {
    valor = evento.target.value
    console.log(valor)
}


[O comportamento visual deveria ser o mesmo, mas tendo uma variável, conseguimos brincar e fazer com ela o que precisarmos.]


Vamos supor agora que preenchemos o let valor com algum valor qualquer. O que acontece?
Nada! O que fizemos foi ouvir o onChange do input e pedimos para imprimir no console quando o input variava.
Nós não colocamos a variável "valor" no input, então precisamos vincular os dois: tanto a variável quanto o que
está sendo digitado no navegador tem que ser consistentes. Neste caso:


let valor = "Miles Edgeworth"

    return (
        <div className="campo-texto">
            <label>
                {props.label}
            </label>
            <input value={valor} onChange={aoDigitar} required = {props.obrigatorio} placeholder={props.placeholder}/>
        </div>
    )
}


O grande problema é:

Por só termos um input, o que colocamos na variável vai aparecer nos três campos de texto.
E quando tentamos digitar alguma coisa, o navegador imprime o valor o tempo todo e mais o caractere
que digitamos. Por alguma razão, também não é possível renomear o valor que atribuímos à variável.
Não está alterando no HTML, ele toda hora executa "let valor = "Miles Edgeworth"".



[O React funciona baseado no JavaScript, porém, se o componente não tiver certeza de que precisa ser renderizado
novamente, ele não vai atualizar o DOM. Se nós quisermos que ele reaja a isso, precisamos fazer de um jeito muito específico.

Agora precisamos fazer com que esse valor seja definido em duas vias para que se definirmos, por algum motivo como
vindo de uma API ou pegando um valor padrão, nós queremos que isso reflita no HTML.

Isso nós chamamos de *estado do componente*. Se o estado for alterado, o componente precisa ser renderizado novamente.
Precisamos usar algo do React que indique essa mudança de estado.]