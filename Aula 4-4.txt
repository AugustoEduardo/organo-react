Vou remover o "const times" do index do Formulario. Fazendo isso, o itens={times} da ListaSuspensa
avisa que "times" não está definido.

No App.js, passaremos os times para a tag <Formulario>, mas aqui os times são uma lista de nomes, logo,
precisamos transformar a lista de times numa lista de strings.


[Poderíamos passar o times inteiro e dentro pegar só os nomes, mas eu optei por não mexer na interface
dos outros componentes porque eu não quero refatorar todo o código que já escrevemos. Só quero o nome,
sem mexer na corPrimaria e na corSecundaria.
Vamos chamar a variável de times e fazer o .map


Aqui, em vez de retornar um componente vamos usar o map do jeito mais JavaScript possível,
que é só transformar um objeto. Queremos deixar de ter um objeto complexo e transformarmos ele em uma lista de nome.

Passamos para dentro do map uma função que recebe como primeiro parâmetro o time em si, o item da lista,
e retorna o que queremos time => time.nome.]



<Formulario times={times.map(time => time.nome)} aoColaboradorCadastrado={colaborador => aoNovoColaboradorAdicionado(colaborador)}/>


(O map está pegando a lista "const times" - desta vez o do App.js - e para cada membro (time), ele retorna somente o nome)

Daí, no index do Formulario, nós já temos o "props" como parâmetro da constante Formulario lá em cima. Logo, mudaremos
o "itens" do <ListaSuspensa/> para props.times.



Chamamos isso de "Elevar o estado". Repare que nós não fizemos isso no início do App.js, não era necessário.
Agora sentimos que foi necessário para evitar código duplicado.


[Temos a base para pensarmos em nosso alvo desde o início, que é adicionar os cards com os cadastro dentro dos times.
Porém, primeiro faremos o componente visual e depois pensaremos no comportamentos.]