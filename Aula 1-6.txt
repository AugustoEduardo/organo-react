[Gostaria de lembrar que ainda estamos com o nosso npm rodando, não é? Se ele parar, tudo para!]

Vamos criar nosso formulário.

Após a criação da pasta CampoTexto e seus arquivos .js e .css, faremos o import delas
no App.js e escreverei <CampoTexto />.
Note que no import ele escreveu Banner e CampoTexto duas vezes. Na verdade ele pegou
Banner.js e CampoTexto.js e omitiu a extensão dos arquivos. O programa vai rodar normalmente
se colocar "js" no final do import.

Mas existe uma forma opcional de organizar os arquivos sem ter esses nomes repetidos.
Basta reescrever os arquivos js para index.js. Obviamente o programa vai dar erro por não
ter encontrado os Banner.js e CampoTexto.js que agora são index.js, então corrigimos isso
removendo o segundo nome do import.

Ué, como assim?
O import agora vai procurar pela pasta e não pelo arquivo. Ele vai perceber que tem um
arquivo index.js naquela pasta e vai rodá-lo. Sim... ele roda o arquivo index da pasta mesmo
que a gente não tenha pedido para ele rodar o index.js especificamente.
Aliás, ao renomear para index.js, o próprio VSCode pergunta se é para ajustar o import removendo
o segundo nome. Clicando em Sim/Yes, ele renomeia automaticamente.



[Agora não precisamos mais duplicar a palavra na hora de importar. Voltando no navegador ele
já está funcionando novamente. É uma maneira diferente de organizar os arquivos para
facilitar a importação.

Acredito que não tenha um consenso porque existem pessoas que preferem usar duplicado,
mas normalmente é dessa forma.]



Mas não renomeie o Banner.js ainda. Se tiver renomeado, ponha o nome anterior de volta e corrija
o import. Porque vamos mostrar outra forma comum de organização das empresas.

No Banner.js, remova o export default e transforme a função numa arrow function. Escreva:

```
export const Banner = () => {
    return (
        <header className="banner">
            <img src="/imagens/banner.png" alt="Banner do cabeçalho"/>
        </header>
    )
}
```

Fiz a arrow function de uma constante Banner e a exportei. Daí, crio um arquivo index.js na pasta
Banner e digito o seguinte:

```
import { Banner } from "./Banner";

export default Banner
```



[O que ganhamos com isso é que "Banner.js" é o componente, o "index" é apenas o que estamos exportando.
Assim se tivermos uma composição de componentes aqui poderemos escolher quais deles vamos exportar.
Para não ficar tudo global e todo mundo ter acesso a tudo.

Isso é mais uma questão de organização de JavaScript puro. Agora se o que você pegou primeiro e
está mais confortável com ele, com o tempo você cria as suas preferência e/ou se adapta ao que
seu time costuma fazer.]


Agora sim, vamos no App.js e removemos o nome Banner repetido do import.

No index.js da pasta CampoTexto, adicione a classe "campo-texto" na div e faça
o import do CampoTexto.css. Aproveite para acrescentar o placeholder na tag input.
No CampoTexto.css, adicione as seguintes propriedades, das quais a maioria aparecem no Figma:

.campo-texto {
    margin: 24px 0;
}

.campo-texto label {
    display: block;
    margin-bottom: 8px;
    font-size: 24px;
}

.campo-texto input {
    background-color: #FFFFFF;
    box-shadow: 10px 10px 30px rgba(0, 0, 0, 0.06);
    width: 100%;
    border: none;
    font-size: 24px;
    padding: 24px;
    box-sizing: border-box;
}